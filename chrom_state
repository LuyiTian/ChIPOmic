'''
Created on 2015-5-16

@author: i7
'''
import os
from parse_metadata import get_data_dir,get_full_EID_list
from Bio import SeqIO
import re
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

def paixu(DF):
    a = ['chr'+str(n) for n in range(1,23)]
    a.append('chrX')
    a.append('chrY')
    chrom = [];
    chromStart = [];
    chromEnd = [];
    for i in a:
        DF_tmp = DF.loc[DF["chrom"] == i].sort('chromStart')
        print 'begin',i
        for j in range(0,len(list(DF_tmp.chrom)),1):
            chrom.append(list(DF_tmp.chrom)[j])
            chromStart.append(list(DF_tmp.chromStart)[j])
            chromEnd.append(list(DF_tmp.chromEnd)[j])
        print 'finish',i
    data = {'chrom':chrom,'chromStart':chromStart,'chromEnd':chromEnd}
    DF = pd.DataFrame(data,columns=['chrom','chromStart','chromEnd'])
    return DF

def get_enhancer():
    path = os.path.join(get_data_dir(), "tmp", "enhancer.txt");
    handle = SeqIO.parse(path,'fasta')
    chrom = [];
    chromStart = [];
    chromEnd = [];
    for i in handle:
        chrom.append(re.split(':|-|\\|',i.id)[1])
        chromStart.append(int(re.split(':|-|\\|',i.id)[2]))
        chromEnd.append(int(re.split(':|-|\\|',i.id)[3]))
    data = {'chrom':chrom,'chromStart':chromStart,'chromEnd':chromEnd}
    enh = pd.DataFrame(data,columns=['chrom','chromStart','chromEnd'])
    enh = paixu(enh)
    enh['chromMiddle'] = (enh.chromStart + enh.chromEnd)/2
    enh.to_csv(os.path.join(get_data_dir(), "tmp", "enh.csv"), 
              sep='\t', index=False)
              
def get_TSS():
    '''
    The predicted TSS was download at http://fantom.gsc.riken.jp/5/datafiles/phase1.3/extra/TSS_classifier/.
    '''
    path = os.path.join(get_data_dir(), "tmp", "TSS_human.bed");
    TSS = pd.read_csv(path, sep='\t',header=None)
    TSS.convert_objects(convert_numeric=True)
    data = {'chrom':list(TSS[0]),'chromStart':list(TSS[1]),'chromEnd':list(TSS[2])}
    TSS = pd.DataFrame(data,columns=['chrom','chromStart','chromEnd'])
    TSS = paixu(TSS)
    TSS['chromMiddle'] = (TSS.chromStart + TSS.chromEnd)/2
    TSS.to_csv(os.path.join(get_data_dir(), "tmp", "TSS.csv"), 
              sep='\t', index=False)
    
def map_mark_state(mark,state,cut_off=40):
    a = ['chr'+str(n) for n in range(1,23)]
    a.append('chrX')
    a.append('chrY')
    TSS = os.path.join(get_data_dir(), "tmp", 'TSS.csv')
    TSS_DF = pd.read_csv(TSS, sep='\t')
    EID = []
    chrom = []
    chromMiddle = []
    signalValue = []

    for c in a:
        path = os.path.join(get_data_dir(), "tmp", "{0}-{1}.csv".format(c, mark))
        DF = pd.read_csv(path, sep='\t')
        TSS_DF_tmp = TSS_DF.loc[TSS_DF['chrom'] == c]
        for i in list(TSS_DF_tmp['chromMiddle'].values):
            tmp = DF.loc[DF['chromStart'].values<i]
            tmp = tmp.loc[tmp['chromEnd'].values>i]
            if len(tmp.index) >= cut_off :
                for j in range(0,len(tmp.index),1):
                    chrom.append(c)
                    chromMiddle.append(i)
                    EID.append(list(tmp.EID)[j])
                    signalValue.append(list(tmp.signalValue)[j])
                
        print 'finish',c
               
    data = {'chrom':chrom,'chromMiddle':chromMiddle,'EID':EID,'signalValue':signalValue}
    DF = pd.DataFrame(data,columns=['chrom','chromMiddle','EID','signalValue'])
    DF.to_csv(os.path.join(get_data_dir(), "tmp", "{0} in {1}-{2}.csv".format(mark,state,cut_off)),
               sep='\t', index=False)
               
    
def res_matrix(mark,state,cut_off=40):
    path = os.path.join(get_data_dir(), "tmp", "{0} in {1}-{2}.csv".format(mark, state,cut_off))
    DF = pd.read_csv(path, sep='\t')
    Full_EID_list = get_full_EID_list()
    res_matrix = []
    tmp = [0.]*len(Full_EID_list)
    for i in range(0,len(DF.index),1):
        try:
            if DF.chromMiddle[i-1] == DF.chromMiddle[i]:
                tmp[Full_EID_list.index(DF.EID[i])] = DF.signalValue[i]
            else:
                res_matrix.append(tmp)
                tmp = [0.]*len(Full_EID_list)
        except:
            pass
    
    f, ax = plt.subplots(figsize=(15, 15))
    cmap = sns.diverging_palette(210, 10, as_cmap=True)
    sns.corrplot(np.array(res_matrix), annot=False, sig_stars=False,   # .T??
             diag_names=False, cmap=cmap, ax=ax)
    f.tight_layout()
    plt.show()
     
    path2 = os.path.join(get_data_dir(), "tmp","{0} in {1}-{2}_diff.csv".format(mark,state,cut_off)) 
    a = open(path2,'w')
    for i in range(0,len(res_matrix[0]),1):
        for j in range(0,len(res_matrix),1):
            a.write(str(res_matrix[j][i])+"\t")
        a.write("\n")
    a.close()
    
    
if __name__ == "__main__":
    # get_enhancer()
    # get_TSS()
    mark = 'H3K4me3'
    state = 'TSS'
    # map_mark_state(mark,state);
    res_matrix(mark,state)
